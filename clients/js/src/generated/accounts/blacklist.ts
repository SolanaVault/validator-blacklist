/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const BLACKLIST_DISCRIMINATOR = new Uint8Array([
  131, 9, 212, 250, 58, 186, 247, 3,
]);

export function getBlacklistDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BLACKLIST_DISCRIMINATOR);
}

export type Blacklist = {
  discriminator: ReadonlyUint8Array;
  validatorIdentityAddress: Address;
  tallyAdd: bigint;
  tallyRemove: bigint;
};

export type BlacklistArgs = {
  validatorIdentityAddress: Address;
  tallyAdd: number | bigint;
  tallyRemove: number | bigint;
};

export function getBlacklistEncoder(): FixedSizeEncoder<BlacklistArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorIdentityAddress', getAddressEncoder()],
      ['tallyAdd', getU64Encoder()],
      ['tallyRemove', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BLACKLIST_DISCRIMINATOR })
  );
}

export function getBlacklistDecoder(): FixedSizeDecoder<Blacklist> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorIdentityAddress', getAddressDecoder()],
    ['tallyAdd', getU64Decoder()],
    ['tallyRemove', getU64Decoder()],
  ]);
}

export function getBlacklistCodec(): FixedSizeCodec<BlacklistArgs, Blacklist> {
  return combineCodec(getBlacklistEncoder(), getBlacklistDecoder());
}

export function decodeBlacklist<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Blacklist, TAddress>;
export function decodeBlacklist<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Blacklist, TAddress>;
export function decodeBlacklist<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Blacklist, TAddress> | MaybeAccount<Blacklist, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBlacklistDecoder()
  );
}

export async function fetchBlacklist<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Blacklist, TAddress>> {
  const maybeAccount = await fetchMaybeBlacklist(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBlacklist<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Blacklist, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBlacklist(maybeAccount);
}

export async function fetchAllBlacklist(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Blacklist>[]> {
  const maybeAccounts = await fetchAllMaybeBlacklist(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBlacklist(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Blacklist>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBlacklist(maybeAccount));
}

export function getBlacklistSize(): number {
  return 56;
}
