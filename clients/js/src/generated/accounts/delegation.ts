/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const DELEGATION_DISCRIMINATOR = new Uint8Array([
  237, 90, 140, 159, 124, 255, 243, 80,
]);

export function getDelegationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DELEGATION_DISCRIMINATOR);
}

export type Delegation = {
  discriminator: ReadonlyUint8Array;
  stakePool: Address;
  manager: Address;
  delegate: Address;
  timestamp: bigint;
};

export type DelegationArgs = {
  stakePool: Address;
  manager: Address;
  delegate: Address;
  timestamp: number | bigint;
};

export function getDelegationEncoder(): FixedSizeEncoder<DelegationArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakePool', getAddressEncoder()],
      ['manager', getAddressEncoder()],
      ['delegate', getAddressEncoder()],
      ['timestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DELEGATION_DISCRIMINATOR })
  );
}

export function getDelegationDecoder(): FixedSizeDecoder<Delegation> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakePool', getAddressDecoder()],
    ['manager', getAddressDecoder()],
    ['delegate', getAddressDecoder()],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getDelegationCodec(): FixedSizeCodec<
  DelegationArgs,
  Delegation
> {
  return combineCodec(getDelegationEncoder(), getDelegationDecoder());
}

export function decodeDelegation<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Delegation, TAddress>;
export function decodeDelegation<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Delegation, TAddress>;
export function decodeDelegation<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Delegation, TAddress> | MaybeAccount<Delegation, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDelegationDecoder()
  );
}

export async function fetchDelegation<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Delegation, TAddress>> {
  const maybeAccount = await fetchMaybeDelegation(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDelegation<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Delegation, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDelegation(maybeAccount);
}

export async function fetchAllDelegation(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Delegation>[]> {
  const maybeAccounts = await fetchAllMaybeDelegation(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDelegation(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Delegation>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeDelegation(maybeAccount));
}

export function getDelegationSize(): number {
  return 112;
}
