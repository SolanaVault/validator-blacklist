/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const VOTE_REMOVE_FROM_BLACKLIST_DISCRIMINATOR = new Uint8Array([
  86, 193, 80, 165, 129, 161, 46, 231,
]);

export function getVoteRemoveFromBlacklistDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VOTE_REMOVE_FROM_BLACKLIST_DISCRIMINATOR
  );
}

export type VoteRemoveFromBlacklist = {
  discriminator: ReadonlyUint8Array;
  stakePool: Address;
  validatorIdentityAddress: Address;
  reason: string;
  timestamp: bigint;
  slot: bigint;
};

export type VoteRemoveFromBlacklistArgs = {
  stakePool: Address;
  validatorIdentityAddress: Address;
  reason: string;
  timestamp: number | bigint;
  slot: number | bigint;
};

export function getVoteRemoveFromBlacklistEncoder(): Encoder<VoteRemoveFromBlacklistArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakePool', getAddressEncoder()],
      ['validatorIdentityAddress', getAddressEncoder()],
      ['reason', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['timestamp', getI64Encoder()],
      ['slot', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: VOTE_REMOVE_FROM_BLACKLIST_DISCRIMINATOR,
    })
  );
}

export function getVoteRemoveFromBlacklistDecoder(): Decoder<VoteRemoveFromBlacklist> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakePool', getAddressDecoder()],
    ['validatorIdentityAddress', getAddressDecoder()],
    ['reason', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['timestamp', getI64Decoder()],
    ['slot', getU64Decoder()],
  ]);
}

export function getVoteRemoveFromBlacklistCodec(): Codec<
  VoteRemoveFromBlacklistArgs,
  VoteRemoveFromBlacklist
> {
  return combineCodec(
    getVoteRemoveFromBlacklistEncoder(),
    getVoteRemoveFromBlacklistDecoder()
  );
}

export function decodeVoteRemoveFromBlacklist<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VoteRemoveFromBlacklist, TAddress>;
export function decodeVoteRemoveFromBlacklist<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VoteRemoveFromBlacklist, TAddress>;
export function decodeVoteRemoveFromBlacklist<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<VoteRemoveFromBlacklist, TAddress>
  | MaybeAccount<VoteRemoveFromBlacklist, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoteRemoveFromBlacklistDecoder()
  );
}

export async function fetchVoteRemoveFromBlacklist<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VoteRemoveFromBlacklist, TAddress>> {
  const maybeAccount = await fetchMaybeVoteRemoveFromBlacklist(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoteRemoveFromBlacklist<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VoteRemoveFromBlacklist, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoteRemoveFromBlacklist(maybeAccount);
}

export async function fetchAllVoteRemoveFromBlacklist(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VoteRemoveFromBlacklist>[]> {
  const maybeAccounts = await fetchAllMaybeVoteRemoveFromBlacklist(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoteRemoveFromBlacklist(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VoteRemoveFromBlacklist>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVoteRemoveFromBlacklist(maybeAccount)
  );
}
