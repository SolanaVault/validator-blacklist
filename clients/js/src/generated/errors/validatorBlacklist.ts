/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { VALIDATOR_BLACKLIST_PROGRAM_ADDRESS } from '../programs';

/** InvalidManager: The signer is not the manager of the stake pool */
export const VALIDATOR_BLACKLIST_ERROR__INVALID_MANAGER = 0x1770; // 6000
/** InvalidStakePool: Invalid stake pool for this delegation */
export const VALIDATOR_BLACKLIST_ERROR__INVALID_STAKE_POOL = 0x1771; // 6001
/** InvalidDelegate: Invalid delegate for this delegation */
export const VALIDATOR_BLACKLIST_ERROR__INVALID_DELEGATE = 0x1772; // 6002
/** UnauthorizedSigner: Unauthorized signer - must be manager or valid delegate */
export const VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_SIGNER = 0x1773; // 6003
/** MathOverflow: Math overflow occurred */
export const VALIDATOR_BLACKLIST_ERROR__MATH_OVERFLOW = 0x1774; // 6004
/** MathUnderflow: Math underflow occurred */
export const VALIDATOR_BLACKLIST_ERROR__MATH_UNDERFLOW = 0x1775; // 6005
/** ReasonTooLong: The reason field exceeds the maximum allowed length */
export const VALIDATOR_BLACKLIST_ERROR__REASON_TOO_LONG = 0x1776; // 6006
/** InsufficientTvl: Stake pool does not meet minimum TVL requirement */
export const VALIDATOR_BLACKLIST_ERROR__INSUFFICIENT_TVL = 0x1777; // 6007
/** UnauthorizedStakePoolProgram: Stake pool program is not in the allowed programs list */
export const VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_STAKE_POOL_PROGRAM = 0x1778; // 6008
/** UnauthorizedAdmin: Only the admin can perform this action */
export const VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_ADMIN = 0x1779; // 6009

export type ValidatorBlacklistError =
  | typeof VALIDATOR_BLACKLIST_ERROR__INSUFFICIENT_TVL
  | typeof VALIDATOR_BLACKLIST_ERROR__INVALID_DELEGATE
  | typeof VALIDATOR_BLACKLIST_ERROR__INVALID_MANAGER
  | typeof VALIDATOR_BLACKLIST_ERROR__INVALID_STAKE_POOL
  | typeof VALIDATOR_BLACKLIST_ERROR__MATH_OVERFLOW
  | typeof VALIDATOR_BLACKLIST_ERROR__MATH_UNDERFLOW
  | typeof VALIDATOR_BLACKLIST_ERROR__REASON_TOO_LONG
  | typeof VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_ADMIN
  | typeof VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_SIGNER
  | typeof VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_STAKE_POOL_PROGRAM;

let validatorBlacklistErrorMessages:
  | Record<ValidatorBlacklistError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  validatorBlacklistErrorMessages = {
    [VALIDATOR_BLACKLIST_ERROR__INSUFFICIENT_TVL]: `Stake pool does not meet minimum TVL requirement`,
    [VALIDATOR_BLACKLIST_ERROR__INVALID_DELEGATE]: `Invalid delegate for this delegation`,
    [VALIDATOR_BLACKLIST_ERROR__INVALID_MANAGER]: `The signer is not the manager of the stake pool`,
    [VALIDATOR_BLACKLIST_ERROR__INVALID_STAKE_POOL]: `Invalid stake pool for this delegation`,
    [VALIDATOR_BLACKLIST_ERROR__MATH_OVERFLOW]: `Math overflow occurred`,
    [VALIDATOR_BLACKLIST_ERROR__MATH_UNDERFLOW]: `Math underflow occurred`,
    [VALIDATOR_BLACKLIST_ERROR__REASON_TOO_LONG]: `The reason field exceeds the maximum allowed length`,
    [VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_ADMIN]: `Only the admin can perform this action`,
    [VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_SIGNER]: `Unauthorized signer - must be manager or valid delegate`,
    [VALIDATOR_BLACKLIST_ERROR__UNAUTHORIZED_STAKE_POOL_PROGRAM]: `Stake pool program is not in the allowed programs list`,
  };
}

export function getValidatorBlacklistErrorMessage(
  code: ValidatorBlacklistError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      validatorBlacklistErrorMessages as Record<ValidatorBlacklistError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isValidatorBlacklistError<
  TProgramErrorCode extends ValidatorBlacklistError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
    code
  );
}
