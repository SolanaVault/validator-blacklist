/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_BLACKLIST_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UNVOTE_ADD_DISCRIMINATOR = new Uint8Array([
  108, 78, 69, 192, 186, 112, 33, 130,
]);

export function getUnvoteAddDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UNVOTE_ADD_DISCRIMINATOR);
}

export type UnvoteAddInstruction<
  TProgram extends string = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountBlacklist extends string | AccountMeta<string> = string,
  TAccountVoteAdd extends string | AccountMeta<string> = string,
  TAccountDelegation extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountBlacklist extends string
        ? WritableAccount<TAccountBlacklist>
        : TAccountBlacklist,
      TAccountVoteAdd extends string
        ? WritableAccount<TAccountVoteAdd>
        : TAccountVoteAdd,
      TAccountDelegation extends string
        ? ReadonlyAccount<TAccountDelegation>
        : TAccountDelegation,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UnvoteAddInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorIdentityAddress: Address;
};

export type UnvoteAddInstructionDataArgs = {
  validatorIdentityAddress: Address;
};

export function getUnvoteAddInstructionDataEncoder(): FixedSizeEncoder<UnvoteAddInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorIdentityAddress', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UNVOTE_ADD_DISCRIMINATOR })
  );
}

export function getUnvoteAddInstructionDataDecoder(): FixedSizeDecoder<UnvoteAddInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorIdentityAddress', getAddressDecoder()],
  ]);
}

export function getUnvoteAddInstructionDataCodec(): FixedSizeCodec<
  UnvoteAddInstructionDataArgs,
  UnvoteAddInstructionData
> {
  return combineCodec(
    getUnvoteAddInstructionDataEncoder(),
    getUnvoteAddInstructionDataDecoder()
  );
}

export type UnvoteAddAsyncInput<
  TAccountConfig extends string = string,
  TAccountStakePool extends string = string,
  TAccountBlacklist extends string = string,
  TAccountVoteAdd extends string = string,
  TAccountDelegation extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** Global configuration account */
  config: Address<TAccountConfig>;
  /** The stake pool account to validate the authority */
  stakePool: Address<TAccountStakePool>;
  blacklist?: Address<TAccountBlacklist>;
  voteAdd?: Address<TAccountVoteAdd>;
  /** Optional delegation account - if present, authority must be the delegate */
  delegation?: Address<TAccountDelegation>;
  /** The authority (either manager or delegated authority) */
  authority: TransactionSigner<TAccountAuthority>;
  validatorIdentityAddress: UnvoteAddInstructionDataArgs['validatorIdentityAddress'];
};

export async function getUnvoteAddInstructionAsync<
  TAccountConfig extends string,
  TAccountStakePool extends string,
  TAccountBlacklist extends string,
  TAccountVoteAdd extends string,
  TAccountDelegation extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
>(
  input: UnvoteAddAsyncInput<
    TAccountConfig,
    TAccountStakePool,
    TAccountBlacklist,
    TAccountVoteAdd,
    TAccountDelegation,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UnvoteAddInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStakePool,
    TAccountBlacklist,
    TAccountVoteAdd,
    TAccountDelegation,
    TAccountAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BLACKLIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    blacklist: { value: input.blacklist ?? null, isWritable: true },
    voteAdd: { value: input.voteAdd ?? null, isWritable: true },
    delegation: { value: input.delegation ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.blacklist.value) {
    accounts.blacklist.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 108, 97, 99, 107, 108, 105, 115, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
        getAddressEncoder().encode(expectSome(args.validatorIdentityAddress)),
      ],
    });
  }
  if (!accounts.voteAdd.value) {
    accounts.voteAdd.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([118, 111, 116, 101, 95, 97, 100, 100])
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getAddressEncoder().encode(expectSome(args.validatorIdentityAddress)),
      ],
    });
  }
  if (!accounts.delegation.value) {
    accounts.delegation.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([100, 101, 108, 101, 103, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.blacklist),
      getAccountMeta(accounts.voteAdd),
      getAccountMeta(accounts.delegation),
      getAccountMeta(accounts.authority),
    ],
    data: getUnvoteAddInstructionDataEncoder().encode(
      args as UnvoteAddInstructionDataArgs
    ),
    programAddress,
  } as UnvoteAddInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStakePool,
    TAccountBlacklist,
    TAccountVoteAdd,
    TAccountDelegation,
    TAccountAuthority
  >);
}

export type UnvoteAddInput<
  TAccountConfig extends string = string,
  TAccountStakePool extends string = string,
  TAccountBlacklist extends string = string,
  TAccountVoteAdd extends string = string,
  TAccountDelegation extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** Global configuration account */
  config: Address<TAccountConfig>;
  /** The stake pool account to validate the authority */
  stakePool: Address<TAccountStakePool>;
  blacklist: Address<TAccountBlacklist>;
  voteAdd: Address<TAccountVoteAdd>;
  /** Optional delegation account - if present, authority must be the delegate */
  delegation?: Address<TAccountDelegation>;
  /** The authority (either manager or delegated authority) */
  authority: TransactionSigner<TAccountAuthority>;
  validatorIdentityAddress: UnvoteAddInstructionDataArgs['validatorIdentityAddress'];
};

export function getUnvoteAddInstruction<
  TAccountConfig extends string,
  TAccountStakePool extends string,
  TAccountBlacklist extends string,
  TAccountVoteAdd extends string,
  TAccountDelegation extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
>(
  input: UnvoteAddInput<
    TAccountConfig,
    TAccountStakePool,
    TAccountBlacklist,
    TAccountVoteAdd,
    TAccountDelegation,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UnvoteAddInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStakePool,
  TAccountBlacklist,
  TAccountVoteAdd,
  TAccountDelegation,
  TAccountAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BLACKLIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    blacklist: { value: input.blacklist ?? null, isWritable: true },
    voteAdd: { value: input.voteAdd ?? null, isWritable: true },
    delegation: { value: input.delegation ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.blacklist),
      getAccountMeta(accounts.voteAdd),
      getAccountMeta(accounts.delegation),
      getAccountMeta(accounts.authority),
    ],
    data: getUnvoteAddInstructionDataEncoder().encode(
      args as UnvoteAddInstructionDataArgs
    ),
    programAddress,
  } as UnvoteAddInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStakePool,
    TAccountBlacklist,
    TAccountVoteAdd,
    TAccountDelegation,
    TAccountAuthority
  >);
}

export type ParsedUnvoteAddInstruction<
  TProgram extends string = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Global configuration account */
    config: TAccountMetas[0];
    /** The stake pool account to validate the authority */
    stakePool: TAccountMetas[1];
    blacklist: TAccountMetas[2];
    voteAdd: TAccountMetas[3];
    /** Optional delegation account - if present, authority must be the delegate */
    delegation?: TAccountMetas[4] | undefined;
    /** The authority (either manager or delegated authority) */
    authority: TAccountMetas[5];
  };
  data: UnvoteAddInstructionData;
};

export function parseUnvoteAddInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUnvoteAddInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === VALIDATOR_BLACKLIST_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stakePool: getNextAccount(),
      blacklist: getNextAccount(),
      voteAdd: getNextAccount(),
      delegation: getNextOptionalAccount(),
      authority: getNextAccount(),
    },
    data: getUnvoteAddInstructionDataDecoder().decode(instruction.data),
  };
}
