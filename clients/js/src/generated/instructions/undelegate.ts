/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_BLACKLIST_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UNDELEGATE_DISCRIMINATOR = new Uint8Array([
  131, 148, 180, 198, 91, 104, 42, 238,
]);

export function getUndelegateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UNDELEGATE_DISCRIMINATOR);
}

export type UndelegateInstruction<
  TProgram extends string = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountDelegation extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountManager extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountDelegation extends string
        ? WritableAccount<TAccountDelegation>
        : TAccountDelegation,
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountManager extends string
        ? WritableSignerAccount<TAccountManager> &
            AccountSignerMeta<TAccountManager>
        : TAccountManager,
      ...TRemainingAccounts,
    ]
  >;

export type UndelegateInstructionData = { discriminator: ReadonlyUint8Array };

export type UndelegateInstructionDataArgs = {};

export function getUndelegateInstructionDataEncoder(): FixedSizeEncoder<UndelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: UNDELEGATE_DISCRIMINATOR })
  );
}

export function getUndelegateInstructionDataDecoder(): FixedSizeDecoder<UndelegateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUndelegateInstructionDataCodec(): FixedSizeCodec<
  UndelegateInstructionDataArgs,
  UndelegateInstructionData
> {
  return combineCodec(
    getUndelegateInstructionDataEncoder(),
    getUndelegateInstructionDataDecoder()
  );
}

export type UndelegateAsyncInput<
  TAccountConfig extends string = string,
  TAccountDelegation extends string = string,
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
> = {
  /** Global configuration account */
  config: Address<TAccountConfig>;
  delegation?: Address<TAccountDelegation>;
  /** The stake pool account to validate the manager */
  stakePool: Address<TAccountStakePool>;
  /** The manager of the stake pool (must match the delegation's manager field) */
  manager: TransactionSigner<TAccountManager>;
};

export async function getUndelegateInstructionAsync<
  TAccountConfig extends string,
  TAccountDelegation extends string,
  TAccountStakePool extends string,
  TAccountManager extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
>(
  input: UndelegateAsyncInput<
    TAccountConfig,
    TAccountDelegation,
    TAccountStakePool,
    TAccountManager
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UndelegateInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountDelegation,
    TAccountStakePool,
    TAccountManager
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BLACKLIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    delegation: { value: input.delegation ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    manager: { value: input.manager ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.delegation.value) {
    accounts.delegation.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([100, 101, 108, 101, 103, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.delegation),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
    ],
    data: getUndelegateInstructionDataEncoder().encode({}),
    programAddress,
  } as UndelegateInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountDelegation,
    TAccountStakePool,
    TAccountManager
  >);
}

export type UndelegateInput<
  TAccountConfig extends string = string,
  TAccountDelegation extends string = string,
  TAccountStakePool extends string = string,
  TAccountManager extends string = string,
> = {
  /** Global configuration account */
  config: Address<TAccountConfig>;
  delegation: Address<TAccountDelegation>;
  /** The stake pool account to validate the manager */
  stakePool: Address<TAccountStakePool>;
  /** The manager of the stake pool (must match the delegation's manager field) */
  manager: TransactionSigner<TAccountManager>;
};

export function getUndelegateInstruction<
  TAccountConfig extends string,
  TAccountDelegation extends string,
  TAccountStakePool extends string,
  TAccountManager extends string,
  TProgramAddress extends Address = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
>(
  input: UndelegateInput<
    TAccountConfig,
    TAccountDelegation,
    TAccountStakePool,
    TAccountManager
  >,
  config?: { programAddress?: TProgramAddress }
): UndelegateInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountDelegation,
  TAccountStakePool,
  TAccountManager
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_BLACKLIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    delegation: { value: input.delegation ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    manager: { value: input.manager ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.delegation),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.manager),
    ],
    data: getUndelegateInstructionDataEncoder().encode({}),
    programAddress,
  } as UndelegateInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountDelegation,
    TAccountStakePool,
    TAccountManager
  >);
}

export type ParsedUndelegateInstruction<
  TProgram extends string = typeof VALIDATOR_BLACKLIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Global configuration account */
    config: TAccountMetas[0];
    delegation: TAccountMetas[1];
    /** The stake pool account to validate the manager */
    stakePool: TAccountMetas[2];
    /** The manager of the stake pool (must match the delegation's manager field) */
    manager: TAccountMetas[3];
  };
  data: UndelegateInstructionData;
};

export function parseUndelegateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUndelegateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      delegation: getNextAccount(),
      stakePool: getNextAccount(),
      manager: getNextAccount(),
    },
    data: getUndelegateInstructionDataDecoder().decode(instruction.data),
  };
}
